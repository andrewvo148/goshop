// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: basket.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Basket_GetBasket_FullMethodName    = "/Basket/GetBasket"
	Basket_UpdateBasket_FullMethodName = "/Basket/UpdateBasket"
	Basket_DeleteBasket_FullMethodName = "/Basket/DeleteBasket"
)

// BasketClient is the client API for Basket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketClient interface {
	GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*CustomerBasketResponse, error)
	UpdateBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*CustomerBasketResponse, error)
	DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketResponse, error)
}

type basketClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketClient(cc grpc.ClientConnInterface) BasketClient {
	return &basketClient{cc}
}

func (c *basketClient) GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*CustomerBasketResponse, error) {
	out := new(CustomerBasketResponse)
	err := c.cc.Invoke(ctx, Basket_GetBasket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) UpdateBasket(ctx context.Context, in *UpdateBasketRequest, opts ...grpc.CallOption) (*CustomerBasketResponse, error) {
	out := new(CustomerBasketResponse)
	err := c.cc.Invoke(ctx, Basket_UpdateBasket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketClient) DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketResponse, error) {
	out := new(DeleteBasketResponse)
	err := c.cc.Invoke(ctx, Basket_DeleteBasket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServer is the server API for Basket service.
// All implementations must embed UnimplementedBasketServer
// for forward compatibility
type BasketServer interface {
	GetBasket(context.Context, *GetBasketRequest) (*CustomerBasketResponse, error)
	UpdateBasket(context.Context, *UpdateBasketRequest) (*CustomerBasketResponse, error)
	DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketResponse, error)
	mustEmbedUnimplementedBasketServer()
}

// UnimplementedBasketServer must be embedded to have forward compatible implementations.
type UnimplementedBasketServer struct {
}

func (UnimplementedBasketServer) GetBasket(context.Context, *GetBasketRequest) (*CustomerBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (UnimplementedBasketServer) UpdateBasket(context.Context, *UpdateBasketRequest) (*CustomerBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasket not implemented")
}
func (UnimplementedBasketServer) DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasket not implemented")
}
func (UnimplementedBasketServer) mustEmbedUnimplementedBasketServer() {}

// UnsafeBasketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServer will
// result in compilation errors.
type UnsafeBasketServer interface {
	mustEmbedUnimplementedBasketServer()
}

func RegisterBasketServer(s grpc.ServiceRegistrar, srv BasketServer) {
	s.RegisterService(&Basket_ServiceDesc, srv)
}

func _Basket_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_GetBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).GetBasket(ctx, req.(*GetBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_UpdateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).UpdateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_UpdateBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).UpdateBasket(ctx, req.(*UpdateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basket_DeleteBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServer).DeleteBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basket_DeleteBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServer).DeleteBasket(ctx, req.(*DeleteBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Basket_ServiceDesc is the grpc.ServiceDesc for Basket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Basket",
	HandlerType: (*BasketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasket",
			Handler:    _Basket_GetBasket_Handler,
		},
		{
			MethodName: "UpdateBasket",
			Handler:    _Basket_UpdateBasket_Handler,
		},
		{
			MethodName: "DeleteBasket",
			Handler:    _Basket_DeleteBasket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basket.proto",
}
